/** Authors: Venkatesh PampanaTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE. * **/package org.fortiss.smg.oSGI.opcuaserver.impl;import java.util.ArrayList;import java.util.List;import org.fortiss.smg.oSGI.opcuaserver.impl.ActuatorClientActivator;import org.fortiss.smg.oSGI.opcuaserver.impl.ActuatorClientImpl;import org.osgi.framework.BundleActivator;import org.osgi.framework.BundleContext;import org.slf4j.LoggerFactory;public class ActuatorClientActivator  implements BundleActivator {	// Logger from sl4j	private static org.slf4j.Logger logger = LoggerFactory			.getLogger(ActuatorClientActivator.class);	private ActuatorClientImpl implClient;	private List<ActuatorClientImpl> clients = new ArrayList<ActuatorClientImpl>();//Start the Bundle		@Override	public void start(BundleContext context) throws Exception {		logger.info("OPCUA: Starting OPCUA server bundle...");		//send path to json file if server should start with defined metadata from json 		implClient = new ActuatorClientImpl("iEMS_OPCUA_Server",							12000,"file:///C:/MyProjects/EclipseWorkspace/oSGI_OPCUA_Server/oSGI.opcuaserver.impl/opcuajsonbuilder.dat"); //json build file path is stored in "feedback"		//or else send empty string inorder to start with default nodes		//implClient = new ActuatorClientImpl("iEMS_OPCUA_Server",		//		12000,""); //json build file path is stored in "feedback"							implClient.activate();				logger.info("opcuaserver Wrapper started");		}    @Override    public void stop(BundleContext context) throws Exception {        // REMEMBER to destroy all resources, threads and do cleanup		for (ActuatorClientImpl client : clients) {			client.deactivate();		}		//this.destroy();        logger.info("opcuaserver is dead");    }}